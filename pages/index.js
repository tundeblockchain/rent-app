import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Header from '../components/Header'
import Footer from '../components/Footer'
import AddListingModal from '../components/Listing/AddListingModal'
import EditListingModal from '../components/Listing/EditListingModal'
import ReserveListingModal from '../components/Listing/ReserveListingModal'
import { useMemo, useState,useEffect } from 'react'
import FilterMenu from '../components/FilterMenu'
import Listings from '../components/Listing/Listings'
import { useRental } from '../hooks/useRental'
import listingsData from '../data/airbnb'
import { Toaster } from 'react-hot-toast';
import Mode from '../constants/constants'

export default function Home() {
  const {web3Modal, publicKey, properties, addProperty, updateProperty, removeProperty, bookProperty, getPropertiesFromHost, getAllProperties, getBookings, loading, transactionPending, initialized, connected} = useRental()
  const [showReservedListing, setShowReservedListing] = useState(false)
  const [listings, setListings] = useState(listingsData)
  const [addListingModalOpen, setAddListingModalOpen] = useState(false)
  const [editListingModalOpen, setEditListingModalOpen] = useState(false)
  const [reserveListingModalOpen, setReserveListingModalOpen] = useState(false)
  const [currentEditListingID, setCurrentEditListingID] = useState(null)
  const [currentReserveListingID, setCurrentReserveListingID] = useState(null)
  const [mode, setMode] = useState(Mode.AllProperties);
  const currentEditListing = useMemo(() => properties.find((listing) => listing.propertyID === currentEditListingID), [currentEditListingID])
  const displayListings = useMemo(() => (showReservedListing ? properties : properties), [showReservedListing, properties])

  const toggleShowReservedListing = () => {
    setShowReservedListing(!showReservedListing)
  }

  const toggleEditListingModal = (listingID) => {
      setCurrentEditListingID(listingID)
      setEditListingModalOpen(true)
  }

  const toggleMode = (selectedModeTitle ) => {
    if (selectedModeTitle == "All Properties"){
      setMode(Mode.AllProperties);
      getAllProperties();
    }else if (selectedModeTitle == "My Bookings"){
      setMode(Mode.MyBookings);
      getBookings();
    }else if (selectedModeTitle == "My Properties"){
      setMode(Mode.MyProperties);
      getPropertiesFromHost();
    }
  }

  const toggleReserveListingModal = (value, listingID) => {
      setCurrentEditListingID(listingID)
      setReserveListingModalOpen(value)
  }

  return (
    <div>
      <Head>
        <title>My Rent-A-Place Site</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header connected={initialized} publicKey={publicKey}/>
      <main className="pt-10 pb-20">
        <FilterMenu setMode={toggleMode} />
        {connected && (
            <div className="px-20 pb-10 flex justify-end space-x-4">
                <button onClick={toggleShowReservedListing} className="border rounded-lg p-4 text-xs font-medium">
                    {showReservedListing ? 'Reserved' : 'All'}
                </button>
                <button onClick={() => setAddListingModalOpen(true)} className="border rounded-lg p-4 text-xs font-medium">
                    Add Listing
                </button>
            </div>
        )}
        {connected && 
        <>
          <Listings connected={connected} publicKey={publicKey} showReservedListing={showReservedListing} listings={displayListings} toggleEditListingModal={toggleEditListingModal} toggleReserveListingModal={toggleReserveListingModal} 
          removeListing={removeProperty} setCurrentEditListingID={setCurrentEditListingID}/>
          <AddListingModal addProperty={addProperty} addListingModalOpen={addListingModalOpen} setAddListingModalOpen={setAddListingModalOpen} />
          <EditListingModal updateProperty={updateProperty} currentEditListing={currentEditListing} currentEditListingID={currentEditListingID} editListingModalOpen={editListingModalOpen} setEditListingModalOpen={setEditListingModalOpen} />
          <ReserveListingModal currentEditListing={currentEditListing} reserveListingModalOpen={reserveListingModalOpen} setReserveListingModalOpen={setReserveListingModalOpen} 
            reserveListing={bookProperty} 
          />
        </>
        }
        {!connected &&
          <div>
            <h1 className='p-4 font-medium'>Please Connect To Polygon Testnet</h1>
          </div>

        }
        
        <Toaster
          position="top-center"
          reverseOrder={false}
          gutter={8}
          containerClassName=""
          containerStyle={{}}
          toastOptions={{
            // Define default options
            className: '',
            duration: 5000,
            style: {
              background: '#363636',
              color: '#fff',
            },

            // Default options for specific types
            success: {
              duration: 3000,
              theme: {
                primary: 'green',
                secondary: 'black',
              },
            },
          }}
        />
      </main>
      
      <Footer />
    </div>
  )
}
